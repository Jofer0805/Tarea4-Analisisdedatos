# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1750DqCOU9t97Vc9Yuoy923nlIF-lg5SC

Carga de Datos
"""

import pandas as pd
mall_df = pd.read_csv('Mall.csv')
mall_df.head() # Mostrar las primeras filas

"""Descripción de Datos:"""

mall_df.describe() # Estadísticas descriptivas
mall_df.info() # Información sobre tipos de datos y valores faltantes

"""Visualización:"""

import matplotlib.pyplot as plt
import seaborn as sns

# Histogramas para variables numéricas
sns.histplot(mall_df['Annual Income (k$)'])
plt.show()

# Diagramas de dispersión para relaciones entre variables
sns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)', data=mall_df)
plt.show()

# Boxplots para identificar valores atípicos
sns.boxplot(y='Spending Score (1-100)', data=mall_df)
plt.show()

"""Valores Faltantes:"""

# Si hay valores faltantes, imputarlos con la media o mediana:
mall_df['Annual Income (k$)'].fillna(mall_df['Annual Income (k$)'].mean(), inplace=True) # Fixed the column name

"""Escalado de Datos:"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_data = scaler.fit_transform(mall_df[['Annual Income (k$)', 'Spending Score (1-100)']])

"""Entrenamiento del Modelo (K-Means):"""

from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=5, random_state=42) # Ajustar n_clusters según sea necesario
kmeans.fit(scaled_data)

"""Evaluación del Modelo:"""

from sklearn.metrics import silhouette_score, calinski_harabasz_score
silhouette = silhouette_score(scaled_data, kmeans.labels_)
calinski_harabasz = calinski_harabasz_score(scaled_data, kmeans.labels_)
print(f"Silhouette Score: {silhouette}")
print(f"Calinski-Harabasz Index: {calinski_harabasz}")

"""Visualización de Resultados:"""

plt.scatter(scaled_data[:, 0], scaled_data[:, 1], c=kmeans.labels_)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='red', marker='X') # Centroides
plt.xlabel('Annual Income (k$) (Escalado)')
plt.ylabel('Spending Score (1-100) (Escalado)')
plt.title('Clusters de Clientes')
plt.show()